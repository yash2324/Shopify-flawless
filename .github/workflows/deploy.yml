name: Deploy Shopify Analytics to AWS EC2

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Build application
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/shopify-analytics
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Navigate to application directory
          cd ~/shopify-analytics/app
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/shopify-analytics:latest" > .env.deploy
          echo "SHOPIFY_SHOP_DOMAIN=${{ secrets.SHOPIFY_SHOP_DOMAIN }}" >> .env.deploy
          echo "SHOPIFY_ACCESS_TOKEN=${{ secrets.SHOPIFY_ACCESS_TOKEN }}" >> .env.deploy
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env.deploy
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> .env.deploy
          
          # Pull latest Docker image
          docker pull ${{ secrets.DOCKER_USERNAME }}/shopify-analytics:latest
          
          # Deploy with zero downtime
          docker-compose -f docker-compose.production.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Health check
          sleep 30
          curl -f http://localhost/api/v1/health || exit 1
          
          echo "‚úÖ Deployment successful!"
        EOF
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üöÄ Deployment to ${{ secrets.DOMAIN_NAME }} successful!"
        else
          echo "‚ùå Deployment failed!"
        fi

  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Health Check
      run: |
        sleep 60  # Wait for services to fully start
        
        # Check main endpoints
        curl -f https://${{ secrets.DOMAIN_NAME }}/api/v1/health
        curl -f https://${{ secrets.DOMAIN_NAME }}/api/v1/docs
        
        echo "‚úÖ All health checks passed!"